
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // === User Profiles ===
    match /users/{userId} {
      // Allow users to read their own profile and admins to read any profile
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin(request.auth.uid));
      // Allow users to update their own profile (specific fields checked in service)
      // Allow admins to update any profile (e.g., approve password change)
      allow write: if request.auth != null && (request.auth.uid == userId || isAdmin(request.auth.uid));
    }

    // === Posts ===
    match /posts/{postId} {
      // Allow authenticated users to read posts (consider time-based filtering here too if needed)
      allow read: if request.auth != null;
      // Allow authenticated users to create posts
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
      // Allow post owner or admin to delete
      allow delete: if request.auth != null && (resource.data.uid == request.auth.uid || isAdmin(request.auth.uid));
      // Allow authenticated users to update (like/unlike)
      allow update: if request.auth != null; // Further checks can be added (e.g., only allow incrementing/array ops)
    }

    // === Comments ===
    match /posts/{postId}/comments/{commentId} {
       // Allow authenticated users to read comments
       allow read: if request.auth != null;
       // Allow authenticated users to add comments
       allow create: if request.auth != null && request.resource.data.uid == request.auth.uid && request.resource.data.postId == postId;
       // Allow comment owner or admin to delete (optional)
       // allow delete: if request.auth != null && (resource.data.uid == request.auth.uid || isAdmin(request.auth.uid));
    }

    // === Chats ===
    match /chats/{chatId} {
       // Allow participants or admins to read/write chat metadata (like typing status)
       allow read, write: if request.auth != null && (request.auth.uid in resource.data.participants || isAdmin(request.auth.uid));
       // Allow participants to create chat document
       allow create: if request.auth != null && request.auth.uid in request.resource.data.participants;
    }

    // === Messages within Chats ===
    match /chats/{chatId}/messages/{messageId} {
       // Allow participants of the chat to read messages
       allow read: if request.auth != null && isParticipant(chatId, request.auth.uid);
       // Allow participants to create messages
       allow create: if request.auth != null && isParticipant(chatId, request.auth.uid) && request.resource.data.uid == request.auth.uid;
       // Generally disallow update/delete, but could allow owner/admin if needed
       // allow update, delete: if false;
    }


    // === Platform Settings ===
    // Allow reads and writes to the settings document only by admins
    match /settings/{settingId} {
      allow read: if request.auth != null; // Allow all auth users to read settings
      allow write: if isAdmin(request.auth.uid); // Only admins can write
    }

    // === Blocked IPs ===
    // Allow admins to read/write blocked IPs
    match /blocked_ips/{ipAddress} {
      allow read, write: if isAdmin(request.auth.uid);
      // Optional: Validate the data being written
      // allow write: if isAdmin(request.auth.uid) && request.resource.data.ip == ipAddress && request.resource.data.blockedAt is timestamp;
    }

    // === Security Logs ===
    // Allow admins to read security logs
    match /security_logs/{logId} {
       allow read: if isAdmin(request.auth.uid);
       // Disallow direct client writes if logs are server-generated
       allow write: if false;
       // OR allow admin writes if needed
       // allow write: if isAdmin(request.auth.uid);
    }

     // === Notifications ===
     // Admins write, target user reads, all auth users read global
     match /notifications/{notificationId} {
       allow read: if request.auth != null && (resource.data.isGlobal == true || resource.data.targetUserId == request.auth.uid);
       allow write: if isAdmin(request.auth.uid);
       // Add validation for notification structure
       // allow create: if isAdmin(request.auth.uid) && request.resource.data.keys().hasAll(['message', 'timestamp', 'senderId', 'isGlobal']);
     }

     // === Admin Messages ===
     // Senders create, Admins read/update (reply)
     match /adminMessages/{messageId} {
        allow read, update: if isAdmin(request.auth.uid); // Admins read/update (reply)
        allow create: if request.auth != null && request.resource.data.senderUid == request.auth.uid; // Senders create
        // Validation for create/update
        // allow create: if request.auth != null && request.resource.data.senderUid == request.auth.uid && request.resource.data.keys().hasAll(['senderUid', 'message', 'timestamp']);
        // allow update: if isAdmin(request.auth.uid) && request.resource.data.keys().hasAll(['reply', 'repliedAt', 'repliedBy', 'isRead']); // Example update validation
     }

     // === Helper Functions ===
     function isAdmin(userId) {
        return exists(/databases/$(database)/documents/users/$(userId)) &&
               get(/databases/$(database)/documents/users/$(userId)).data.isAdmin == true;
     }

     function isParticipant(chatId, userId) {
        return exists(/databases/$(database)/documents/chats/$(chatId)) &&
               userId in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
     }

     // Default Deny (optional but recommended) - Uncomment if needed
     // match /{document=**} {
     //   allow read, write: if false;
     // }
  }
}
