
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection rules
    match /users/{userId} {
      // Allow reading profile if authenticated
      allow read: if request.auth != null;
      // Allow writing (updating) profile only if the user is updating their own profile
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Posts collection rules
    match /posts/{postId} {
      // Allow reading posts if authenticated
      allow read: if request.auth != null;
      // Allow creating posts if authenticated
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
      // Allow updating (like/comment counts) if authenticated
      allow update: if request.auth != null;
      // Allow deleting posts only if the user is the owner
      allow delete: if request.auth != null && resource.data.uid == request.auth.uid;

      // Comments subcollection rules
      match /comments/{commentId} {
        // Allow reading comments if authenticated
        allow read: if request.auth != null;
        // Allow creating comments if authenticated and user matches
        allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
        // Disallow direct updates/deletes for simplicity (handle via post delete)
        allow update, delete: if false;
      }
    }

    // Chats collection rules
    match /chats/{chatId} {
      // Allow reading/writing chat document (for participants, typing status) if user is a participant
      allow read, write: if request.auth != null && request.auth.uid in resource.data.participants;

      // Messages subcollection rules
      match /messages/{messageId} {
        // Allow reading messages if the user is a participant in the chat
        allow read: if request.auth != null && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
        // Allow creating messages if user is authenticated and matches the message sender UID
        allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
        // Disallow direct updates/deletes for simplicity
        allow update, delete: if false;
      }
    }

     // Settings collection rules (for admin config)
    match /settings/{docId} {
       // Allow reading settings if authenticated
       allow read: if request.auth != null;
       // Allow writing settings only if the user is an admin (check user document)
       allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
     }

     // Security Logs collection rules
     match /security_logs/{logId} {
       // Only allow admins to read logs
       allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
       // Disallow direct client writes (logs should be written by server-side functions/actions)
       allow write: if false;
     }

     // Blocked IPs collection rules
     match /blocked_ips/{ipAddress} {
       // Only allow admins to read/write blocked IPs
       allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
     }

     // Admin Messages collection rules
     match /adminMessages/{messageId} {
       // Allow admins to read all messages
       allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
       // Allow any authenticated user to send a message TO admin
       allow create: if request.auth != null && request.resource.data.senderUid == request.auth.uid;
       // Allow admins to update messages (e.g., mark as read, add reply)
       allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
       // Disallow direct deletion for now
       allow delete: if false;
     }

      // Notifications collection rules
     match /notifications/{notificationId} {
       // Allow reading if global OR targeted to the requesting user
       allow read: if request.auth != null && (resource.data.isGlobal == true || resource.data.targetUserId == request.auth.uid);
       // Allow writing only if the user is an admin
       allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
       // Allow updates (e.g., mark as read) only by the target user or admin
        allow update: if request.auth != null && (resource.data.targetUserId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
       // Disallow direct deletion for now
       allow delete: if false;
     }

  }
}
